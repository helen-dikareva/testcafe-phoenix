var hammerhead        = window.getTestCafeModule('hammerhead');
var iframeSandbox     = hammerhead.sandbox.iframe;
var getStoredAttrName = hammerhead.getStoredAttrName;
var browserUtils      = hammerhead.utils.browser;

var testCafeAutomation = window.getTestCafeModule('testCafeAutomation');

var SelectorGenerator = testCafeAutomation.SelectorGenerator;
var selectorGenerator = new SelectorGenerator();

//selector by tags tree becomes more of a priority when number of elements found by other selectors more than:
var ANCESTOR_AND_TAGS_TREE_RULE_VALIDITY_BOUND = 10;
var TAGS_TREE_RULE_VALIDITY_BOUND              = 20;

$(document).ready(function () {
    var container = null;

    /*    var IFRAME_READY_TIMEOUT = 100;*/

    /*
        function setIframeReadyTimeout (testFunction) {
            window.setTimeout(function () {
                window.setTimeout(testFunction, IFRAME_READY_TIMEOUT);
            }, 0);
        }
    */

    QUnit.testStart = function () {
        container = $('<div></div>').appendTo('body')[0];
        iframeSandbox.on(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
        iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, iframeSandbox.iframeReadyToInitHandler);
    };

    QUnit.testDone(function () {
        document.body.removeChild(container);
        iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
    });

    module('tag generation rule');

    test('html element', function () {
        var selector = selectorGenerator.generate(document.documentElement);

        equal(selector, "Selector('html')");
    });

    test('body element', function () {
        var selector = selectorGenerator.generate(document.body);

        equal(selector, "Selector('body')");
    });


    module('id generation rule');

    test('element with id', function () {
        var testId     = 'testId';
        var elemWithId = $('<div></div>').attr('id', testId).appendTo(container)[0];
        var selector   = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('#testId')");
    });

    test('elements with ASP autogenerated id', function () {
        var elemWithId = $('<div></div>').attr('id', 'ctl02').appendTo(container)[0];
        var selector   = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /ctl\\d+/)");

        elemWithId.setAttribute('id', 'test1_ctl03_test2');
        selector = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /test1_ctl\\d+_test2/)");

        elemWithId.setAttribute('id', 'test_ctl23');
        selector = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /test_ctl\\d+/)");

        elemWithId.setAttribute('id', 'ctl00_Test');
        selector = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /ctl\\d+_Test/)");

        elemWithId.setAttribute('id', 'ctl01_te:s\'t1_te;s"t2_ctl02_t\\e(s)t3_ctl04');
        selector = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /ctl\\d+_te:s\\'t1_te;s\\\"t2_ctl\\d+_t\\\\e\\Ss\\St3_ctl\\d+/)");
    });

    test('element with prohibited symbols in ID (B239137, T133746)', function () {
        var $div = $('<div></div>')
            .attr('id', '$test:test!a"a#a%a&a\'a(a|a)a*a+a,a.a/a:a;a<a=a>a?a@a[a]a^a`a{a|a}a~a')
            .appendTo(container);

        var selector = selectorGenerator.generate($div[0]);

        equal(selector, "Selector('#\\$test\\:test\\!a\\\"a\\#a\\%a\\&a\\'a\\(a\\|a\\)a\\*a\\+a\\,a\\.a\\/a\\:a\\;a\\<a\\=a\\>a\\?a\\@a\\[a\\]a\\^a\\`a\\{a\\|a\\}a\\~a')");
    });


    module('text generation rule');

    test('element with text', function () {
        var elemWithClass = $('<div></div>').text('someText').appendTo(container)[0];
        var selector      = selectorGenerator.generate(elemWithClass);

        equal(selector, "Selector('div').withText('someText').nth(1)");
    });

    test('element without own text having children with text', function () {
        $('<div></div>').text('text').appendTo(container);

        var elemWithoutText = $('<div></div>').appendTo(container)[0];

        var selector = selectorGenerator.generate(elemWithoutText);

        equal(selector, "Selector('body').find('div').nth(0).find('div').nth(1)");
    });

    test('element with very long text', function () {
        var text                = 'this text is too long to generate a selector with it because that selector would be not readable because the text is so long that i have never seen such long text before J';
        var elementWithLongText = $('<div></div>').text(text).appendTo(container)[0];
        var selector            = selectorGenerator.generate(elementWithLongText);

        equal(selector, "Selector('div').withText('this text is too long to generate a selector with').nth(1)");
    });

    test('element with text containing non-alphanumeric characters', function () {
        var elemWithText = $('<div></div>').text('text ( " ) \' \n \r # ! % @ ^ text & *').appendTo(container)[0];
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('div').withText('text').nth(1)");
    });

    test('element with text containing another element with text', function () {
        var $elemWithText     = $('<div>some text <span>span text</span> and another text</div>').appendTo(container);
        var childElemWithText = $elemWithText.find('span')[0];

        var parentSelector = selectorGenerator.generate($elemWithText[0]);
        var childSelector  = selectorGenerator.generate(childElemWithText);

        equal(parentSelector, "Selector('div').withText('and another text').nth(1)", 'parent selector contains only parent\'s text');
        equal(childSelector, "Selector('span').withText('span text')", 'child selector contains only child\'s text');
    });

    test('elements with text within element with id', function () {
        var $elemWithId            = $('<div></div>').attr('id', 'someId').appendTo(container);
        var elemWithText           = $('<div></div>').text('some text').appendTo($elemWithId)[0];
        var anotherElementWithText = $('<div></div>').text('another text').appendTo($('<div></div>').appendTo($('<div></div>').appendTo($elemWithId)))[0];

        var selector        = selectorGenerator.generate(elemWithText);
        var anotherSelector = selectorGenerator.generate(anotherElementWithText);

        equal(selector, "Selector('#someId').find('div').withText('some text')", 'selector was generated by ancestor id and text');
        equal(anotherSelector, "Selector('#someId').find('div').withText('another text').nth(2)", 'selector was generated by ancestor id and text');
    });


    module('attr generation rule');

    test('element with class', function () {
        var elemWithClass = $('<div></div>').attr('class', 'someClass').appendTo(container)[0];
        var selector      = selectorGenerator.generate(elemWithClass);

        equal(selector, "Selector('.someClass')");
    });

    test('img with alt', function () {
        var elemWithAlt = $('<img />').attr('alt', 'someAlt').appendTo(container)[0];
        var selector    = selectorGenerator.generate(elemWithAlt);

        equal(selector, "Selector('[alt=\"someAlt\"]')");
    });

    test('element with attributes not acceptable for selectors', function () {
        var elemWithOnclick = $('<div></div>').attr('onclick', 'console.log("click")').appendTo(container)[0];
        var selector        = selectorGenerator.generate(elemWithOnclick);

        equal(selector, "Selector('body').find('div').nth(0).find('div').nth(0)");
    });

    test('element with ASP autogenerated name', function () {
        var elemWithClass = $('<div></div>').attr('name', 'ctl08$te\\st1$te\'s(t)2$ctl02$te:st3$ctl04').appendTo(container)[0];
        var selector      = selectorGenerator.generate(elemWithClass);

        equal(selector, "Selector('div').withAttr('name', /ctl\\d+\\$te\\\\st1\\$te\\'s\\St\\S2\\$ctl\\d+\\$te:st3\\$ctl\\d+/)");
    });

    test('elements with attr containing prohibited symbols', function () {
        var elem     = $('<div></div>').attr('data-source', '          thisDiv  \n contains        separators                    and line feed           and          *     +  \   /        : ^ - ? |            and       (     )      ~`!@#$%^&*()_-+=\|/[]{}\'?.,><12390         {              \'                  }            ').appendTo(container)[0];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('div').withAttr('data-source', /\\s+thisDiv\\s+contains\\s+separators\\s+/)");
    });

    test('element with attr containing non-alphanumeric symbols', function () {
        var elem1     = $('<div></div>').attr('data-attr', 'thisDiv\'Contains\'quotes\\and"double"quotes').appendTo(container)[0];
        var elem2     = $('<div></div>').attr('data-item', "aaa'aaa123490!@#$%^&*()-_=+\|/[]?.,><~`{}name").appendTo(container)[0];
        var elem3     = $('<div></div>').attr('class', 's\'o%m"e$c:l&as\\s').attr('title', 's\'o%m"e$c:l&as\\s').appendTo(container)[0];
        var selector1 = selectorGenerator.generate(elem1);
        var selector2 = selectorGenerator.generate(elem2);
        var selector3 = selectorGenerator.generate(elem3);

        equal(selector1, "Selector('[data-attr=\"thisDiv\\'Contains\\'quotes\\\\and\\\"double\\\"quotes\"]')");
        equal(selector2, "Selector('[data-item=\"aaa\\'aaa123490!@#$%^&*()-_=+|/[]?.,><~`{}name\"]')");

        if (browserUtils.isIE)
            equal(selector3, "Selector('[title=\"s\\'o%m\\\"e$c:l&as\\\\s\"].s\\'o\\%m\\\"e\\$c\\:l\\&as\\\\s')");
        else
            equal(selector3, "Selector('.s\\'o\\%m\\\"e\\$c\\:l\\&as\\\\s[title=\"s\\'o%m\\\"e$c:l&as\\\\s\"]')");
    });

    test('element with attr with too long value', function () {
        var elem     = $('<div></div>').attr('data-city', 'Krungthepmahanakhon Amornrattanakosin Mahintharayutthaya Mahadilokphop Noppharat Ratchathaniburirom Udomratchaniwetmahasathan Amonphiman Awatansathit Sakkathattiyawitsanukamprasit').appendTo(container)[0];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('[data-city^=\"Krungthepmahanakhon Amornrattanakosin Mahintharayu\"]')");
    });

    test('element with several attributes', function () {
        var elemWithSeveralAttrs = $('<div></div>')
            .attr({
                class: 'some classes',
                name:  'someName',
                alt:   'someAlt'
            })
            .attr('data-attr', 'ыть    \   ыть / ')
            .appendTo(container)[0];

        var selector = selectorGenerator.generate(elemWithSeveralAttrs);

        equal(selector, "Selector('.some.classes[name=\"someName\"][alt=\"someAlt\"]').withAttr('data-attr', /ыть\\s+ыть \\/ /)");
    });

    test('elements with attr within element with id', function () {
        var elemWithId          = $('<div></div>').attr('id', 'someId').appendTo(container)[0];
        var elemWithName        = $('<div></div>').attr('name', 'someName').appendTo(elemWithId)[0];
        var anotherElemWithId   = $('<div></div>').attr('id', 'anotherId').appendTo(elemWithId)[0];
        var anotherElemWithName = $('<div></div>').attr('name', 'anotherName').appendTo(anotherElemWithId)[0];

        var selector        = selectorGenerator.generate(elemWithName);
        var anotherSelector = selectorGenerator.generate(anotherElemWithName);

        equal(selector, "Selector('[name=\"someName\"]')");
        equal(anotherSelector, "Selector('[name=\"anotherName\"]')");
    });

    test('element with TestCafe attributes', function () {
        var hammerheadUrlAttr       = getStoredAttrName('href');
        var hammerheadDataHoverAttr = getStoredAttrName('data-hover');
        var hammerheadDataFocusAttr = getStoredAttrName('data-focus');

        var divWithUrlAttrKey = $('<div></div>')
            .attr(hammerheadUrlAttr, 'value')
            .attr(hammerheadDataHoverAttr, '')
            .attr(hammerheadDataFocusAttr, true)
            .attr('class', 'someClass')
            .appendTo(container)[0];

        var selector = selectorGenerator.generate(divWithUrlAttrKey);

        equal(selector, "Selector('.someClass')");
    });


    module('form+input generation rule');

    test('input element within form with title', function () {
        var form     = $('<form></form>').attr('title', 'someTitle').appendTo(container)[0];
        var input    = $('<input type="text"/>').attr('name', 'someName').appendTo(form)[0];
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('[title=\"someTitle\"]').find('[name=\"someName\"]')");
    });

    test('input element within form with id', function () {
        var form     = $('<form></form>').attr('id', 'someId').appendTo(container)[0];
        var input    = $('<input type="text"/>').attr('name', 'someName').appendTo(form)[0];
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('#someId').find('[name=\"someName\"]')");
    });

    test('input element within container with id within form with id', function () {
        var form           = $('<form></form>').attr('id', 'formId').appendTo(container)[0];
        var inputContainer = $('<div></div>').attr('id', 'anotherId').appendTo(form)[0];
        var input          = $('<input type="text"/>').attr('name', 'someName').appendTo(inputContainer)[0];
        var selector       = selectorGenerator.generate(input);

        equal(selector, "Selector('#formId').find('[name=\"someName\"]')");
    });


    module('tag tree rule');

    test('element without identifiers', function () {
        var $div = $('<div></div>').appendTo(container);

        $('<span></span>').appendTo($div);

        var $secondSpan = $('<span></span>').appendTo($div);

        $('<b></b>').appendTo($secondSpan);
        $('<b></b>').appendTo($secondSpan);

        var thirdB = $('<b></b>').appendTo($secondSpan)[0];

        $('<span></span>').appendTo($div);

        var selector = selectorGenerator.generate(thirdB);

        equal(selector, "Selector('body').find('div').nth(0).find('div').nth(0).find('span').nth(1).find('b').nth(2)");
    });


    module('parent and child selectors');

    test('id+text rule: element with text has a parent with id', function () {
        var elemWithId = $('<div></div>').attr('id', 'someId').appendTo(container)[0];

        $('<span>a</span>').appendTo(elemWithId);
        $('<span>b</span>').appendTo(elemWithId);

        var div          = $('<div></div>').appendTo(elemWithId)[0];
        var elemWithText = $('<div></div>').text('text').appendTo(div)[0];

        var selector = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('#someId').find('div').withText('text').nth(1)");
    });

    test('id+attr rule: element with attr has a parent with id', function () {
        var grandParentWithId = $('<div></div>').attr('id', 'grand-parent-id').appendTo(container)[0];
        var parentWithId      = $('<div></div>').attr('id', 'parent-id').appendTo(grandParentWithId)[0];

        $('<span>a</span>').appendTo(parentWithId);
        $('<span>b</span>').appendTo(parentWithId);
        $('<img/>').attr('alt', 'text for image').appendTo(container);

        var div          = $('<div></div>').appendTo(parentWithId)[0];
        var elemWithText = $('<img/>').attr('alt', 'text for image').appendTo(div)[0];

        var selector = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('#parent-id').find('[alt=\"text for image\"]')");
    });

    test('id+tag tree rule: element without identifiers has a parent with id', function () {
        var elemWithId   = $('<div></div>').attr('id', 'someId').appendTo(container)[0];
        var elemWithText = $('<div></div>').text('text').appendTo(elemWithId)[0];

        $('<span></span>').appendTo(elemWithText);

        var elem     = $('<span></span>').appendTo(elemWithText)[0];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('#someId').find('div').nth(0).find('span').nth(1)");
    });

    test('text+tag tree rule: element without identifiers has a parent with text', function () {
        var $div     = $('<div>abc<div><span>0</span><span></span><span>2</span></div></div>').appendTo(container);
        var elem     = $div.find('span:nth(1)')[0];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('div').withText('abc').nth(1).find('div').nth(0).find('span').nth(1)");
    });


    module('selectors priority');

    test('input element with non-unique name within form with title', function () {
        var form     = $('<form></form>').attr('title', 'someTitle').appendTo(container)[0];
        var input11  = $('<input />').attr('name', 'someName').appendTo(form)[0];
        var selector = selectorGenerator.generate(input11);

        equal(selector, "Selector('[title=\"someTitle\"]').find('[name=\"someName\"]')", 'selector generated by form+input rule');

        var input12 = $('<input />').attr('name', 'someName').attr('class', 'someClass').appendTo(form)[0];

        selector = selectorGenerator.generate(input12);

        equal(selector, "Selector('[name=\"someName\"].someClass')", 'selector generated by attributes rule');
    });

    test('element with class and text equal to other element class and text', function () {
        var testText = 'testText';

        $('<div></div>').text(testText).attr('class', 'someClass').appendTo(container);

        var div2     = $('<div></div>').text(testText).attr('class', 'someClass').appendTo(container)[0];
        var selector = selectorGenerator.generate(div2);

        equal(selector, "Selector('.someClass').nth(1)", 'selector by text returns 3 elements, selector by attr returns 2 elements');
    });

    test('boundary case: element with class equal to many others elements within element with id', function () {
        var className       = 'someClass';
        var containerWithId = $('<div></div>').attr('id', 'someId').appendTo(container)[0];

        for (var i = 0; i < ANCESTOR_AND_TAGS_TREE_RULE_VALIDITY_BOUND - 1; i++)
            $('<div></div>').attr('class', className).appendTo(containerWithId);

        var currentDiv = $('<div></div>').attr('class', className).appendTo(containerWithId)[0];
        var selector   = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('.someClass').nth(9)");

        $('<div></div>').attr('class', className).appendTo(containerWithId);
        selector = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('#someId').find('div').nth(9)");
    });

    test('boundary case: element with text equal to many others elements', function () {
        var text = 'someText';

        // NOTE: we should subtract 2 elements because container match the selector condition too
        for (var i = 0; i < TAGS_TREE_RULE_VALIDITY_BOUND - 2; i++)
            $('<div></div>').text(text).appendTo(container);

        var currentDiv = $('<div></div>').text(text).appendTo(container)[0];
        var selector   = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('div').withText('someText').nth(19)");

        $('<div></div>').text(text).appendTo(container);
        selector = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('body').find('div').nth(0).find('div').nth(18)");
    });


    module('check one element');

    test('example div', function () {
        var $parentDiv = $('<div></div>').appendTo(container);
        var $div       = $('<div></div>').appendTo($parentDiv);
        var div        = $div[0];
        var selector   = selectorGenerator.generate(div);

        equal(selector, "Selector('body').find('div').nth(0).find('div').nth(0).find('div').nth(0)", 'selector was generated by tag tree');

        $div.attr('class', 'someClass');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('.someClass')", 'selector was generated by attr');

        $div.removeAttr('class');
        $div.text('someText');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('div').withText('someText').nth(2)", 'selector was generated by text');

        $div.attr('id', 'someId');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('#someId')", 'selector was generated by id');

        var text = document.createTextNode('otherText');

        $div.removeAttr('id');
        $div.text('');
        $parentDiv[0].insertBefore(text, $div[0]);
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('div').withText('otherText').nth(1).find('div').nth(0)", 'selector was generated by ancestor text and tag tree');

        $parentDiv.attr('class', 'parent');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('.parent').find('div').nth(0)", 'selector was generated by ancestor attr and tag tree');

        $parentDiv.attr('id', 'parentId');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('#parentId').find('div').nth(0)", 'selector was generated by ancestor id and tag tree');

        var $anotherDiv = $('<div class="child"></div>').appendTo(container);

        $div.attr('class', 'child');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('#parentId').find('.child')", 'selector was generated by ancestor id and attr');

        $div.text('someText');
        $anotherDiv.text('someAnotherText');
        selector = selectorGenerator.generate(div);
        equal(selector, "Selector('#parentId').find('div').withText('someText')", 'selector was generated by ancestor id and text');
    });

    /*asyncTest('iframe html element', function () {
    //TODO iframes
        var $iframe = $('<iframe></iframe>').appendTo(container);

        setIframeReadyTimeout(function () {
            var $html    = $('html', $iframe.contents());
            var selector = selectorGenerator.generate($html[0]);

            equal(selector, "Selector('html')");
            start();
        });
    });

    asyncTest('iframe body element', function () {
        var $iframe = $('<iframe></iframe>').appendTo(container);

        setIframeReadyTimeout(function () {
            var $body    = $('body', $iframe.contents());
            var selector = selectorGenerator.generate($body[0]);

            equal(selector, "Selector('body')");
            start();
        });
    });*/

});
