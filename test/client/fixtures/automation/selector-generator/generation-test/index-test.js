var hammerhead        = window.getTestCafeModule('hammerhead');
var iframeSandbox     = hammerhead.sandbox.iframe;
var getStoredAttrName = hammerhead.getStoredAttrName;
var browserUtils      = hammerhead.utils.browser;

var testCafeAutomation = window.getTestCafeModule('testCafeAutomation');

var SelectorGenerator = testCafeAutomation.SelectorGenerator;
var selectorGenerator = new SelectorGenerator();

$(document).ready(function () {
    var container = document.body;

    QUnit.testStart = function () {
        iframeSandbox.on(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
        iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, iframeSandbox.iframeReadyToInitHandler);
    };

    QUnit.testDone(function () {
        iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
    });

    module('tag generation rule');

    test('html element', function () {
        var selector = selectorGenerator.generate(document.documentElement);

        equal(selector, "Selector('html')");
    });

    test('body element', function () {
        var selector = selectorGenerator.generate(document.body);

        equal(selector, "Selector('body')");
    });


    module('id generation rule');

    test('element with id', function () {
        var elemWithId = document.getElementById('testId');
        var selector   = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('#testId')");
    });

    test('elements with ASP autogenerated id', function () {
        var elemWithId = document.getElementById('ctl02');
        var selector   = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('div').withAttr('id', /ctl\\d+/)");

        elemWithId = document.getElementById('test1_ctl03_test2');
        selector   = selectorGenerator.generate(elemWithId);
        equal(selector, "Selector('div').withAttr('id', /test1_ctl\\d+_test2/)");

        elemWithId = document.getElementById('test_ctl23');
        selector   = selectorGenerator.generate(elemWithId);
        equal(selector, "Selector('div').withAttr('id', /test_ctl\\d+/)");

        elemWithId = document.getElementById('ctl00_Test');
        selector   = selectorGenerator.generate(elemWithId);
        equal(selector, "Selector('div').withAttr('id', /ctl\\d+_Test/)");

        elemWithId = document.getElementById('ctl00_Test').nextElementSibling;
        selector   = selectorGenerator.generate(elemWithId);
        equal(selector, "Selector('div').withAttr('id', /ctl\\d+_te:s\\'t1_te;s\\\"t2_ctl\\d+_t\\\\e\\Ss\\St3_ctl\\d+/)");
    });

    test('element with prohibited symbols in ID (B239137, T133746)', function () {
        var elemWithId = document.querySelector('select');
        var selector   = selectorGenerator.generate(elemWithId);

        equal(selector, "Selector('#\\$test\\:test\\!a\\\"a\\#a\\%a\\&a\\'a\\(a\\|a\\)a\\*a\\+a\\,a\\.a\\/a\\:a\\;a\\<a\\=a\\>a\\?a\\@a\\[a\\]a\\^a\\`a\\{a\\|a\\}a\\~a')");
    });


    module('text generation rule');

    test('element with text', function () {
        var elemWithText = document.querySelector('code');
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('code').withText('someText')");
    });

    test('element without own text having children with text', function () {
        var elemWithoutText = document.querySelector('div > div');
        var selector        = selectorGenerator.generate(elemWithoutText);

        equal(selector, "Selector('div').withText('text').find('div')");
    });

    test('element with very long text', function () {
        var elementWithLongText = document.querySelector('label');
        var selector            = selectorGenerator.generate(elementWithLongText);

        equal(selector, "Selector('label').withText('this text is too long to generate a selector with')");
    });

    test('element with text containing non-alphanumeric characters', function () {
        var elemWithText = document.querySelector('legend');
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('legend').withText('alpha')");
    });

    test('element with text containing another element with text', function () {
        var elemWithText      = document.querySelector('ins');
        var childElemWithText = elemWithText.querySelector('ins > span');

        var parentSelector = selectorGenerator.generate(elemWithText);
        var childSelector  = selectorGenerator.generate(childElemWithText);

        equal(parentSelector, "Selector('ins').withText('and another text')", 'parent selector contains only parent\'s text');
        equal(childSelector, "Selector('span').withText('span text')", 'child selector contains only child\'s text');
    });

    test('elements with text within element with id', function () {
        var elemWithId             = document.getElementById('someId');
        var elemWithText           = elemWithId.querySelector('div');
        var anotherElementWithText = elemWithId.querySelector('div > div > div > div');

        var selector        = selectorGenerator.generate(elemWithText);
        var anotherSelector = selectorGenerator.generate(anotherElementWithText);

        equal(selector, "Selector('#someId').find('div').withText('some text')", 'selector was generated by ancestor id and text');
        equal(anotherSelector, "Selector('#someId').find('div').withText('another text').nth(2)", 'selector was generated by ancestor id and text');
    });


    module('attr generation rule');

    test('element with class', function () {
        var elemWithClass = document.querySelector('.someClass');
        var selector      = selectorGenerator.generate(elemWithClass);

        equal(selector, "Selector('.someClass')");
    });

    test('img with alt', function () {
        var elemWithAlt = document.querySelector('[alt="someAlt"]');
        var selector    = selectorGenerator.generate(elemWithAlt);

        equal(selector, "Selector('[alt=\"someAlt\"]')");
    });

    test('element with attributes not acceptable for selectors', function () {
        var elemWithOnclick = document.querySelector('button');
        var selector        = selectorGenerator.generate(elemWithOnclick);

        equal(selector, "Selector('body').find('button')");
    });

    test('element with ASP autogenerated name', function () {
        var elemWithName = document.querySelector('input');
        var selector     = selectorGenerator.generate(elemWithName);

        equal(selector, "Selector('input').withAttr('name', /ctl\\d+\\$te\\\\st1\\$te\\'s\\St\\S2\\$ctl\\d+\\$te:st3\\$ctl\\d+/)");
    });

    test('elements with attr containing prohibited symbols', function () {
        var elem     = document.querySelector('[data-source]');
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('div').withAttr('data-source', /\\s+thisDiv\\s+contains\\s+separators\\s+/)");
    });

    test('element with attr containing non-alphanumeric symbols', function () {
        var elem1 = document.querySelector('[data-attr]');
        var elem2 = document.querySelector('[data-item]');
        var elem3 = document.querySelector('[title]');

        var selector1 = selectorGenerator.generate(elem1);
        var selector2 = selectorGenerator.generate(elem2);
        var selector3 = selectorGenerator.generate(elem3);

        equal(selector1, "Selector('[data-attr=\"thisDiv\\'Contains\\'quotes\\\\and\\\"double\\\"quotes\"]')");
        equal(selector2, "Selector('[data-item=\"aaa\\'aaa123490!@#$%^&*()-_=+|/[]?.,><~`{}name\"]')");

        if (browserUtils.isIE)
            equal(selector3, "Selector('[title=\"s\\'o%m\\\"e$c:l&as\\\\s\"].s\\'o\\%m\\\"e\\$c\\:l\\&as\\\\s')");
        else
            equal(selector3, "Selector('.s\\'o\\%m\\\"e\\$c\\:l\\&as\\\\s[title=\"s\\'o%m\\\"e$c:l&as\\\\s\"]')");
    });

    test('element with attr with too long value', function () {
        var elem     = document.querySelector('[data-city]');
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('[data-city^=\"Krungthepmahanakhon Amornrattanakosin Mahintharayu\"]')");
    });

    test('element with several attributes', function () {
        var elemWithSeveralAttrs = document.querySelector('.some.classes');
        var selector             = selectorGenerator.generate(elemWithSeveralAttrs);

        if (browserUtils.isIE)
            equal(selector, "Selector('.some.classes[alt=\"someAlt\"][name=\"someName\"]').withAttr('data-attr', /ыть\\s+ыть \\/ /)");
        else
            equal(selector, "Selector('.some.classes[name=\"someName\"][alt=\"someAlt\"]').withAttr('data-attr', /ыть\\s+ыть \\/ /)");
    });

    test('elements with attr within element with id', function () {
        var elemWithName        = document.querySelector('#parentDivId > div');
        var anotherElemWithName = document.querySelector('#childDivId > div');

        var selector        = selectorGenerator.generate(elemWithName);
        var anotherSelector = selectorGenerator.generate(anotherElemWithName);

        equal(selector, "Selector('[name=\"divName\"]')");
        equal(anotherSelector, "Selector('[name=\"anotherDivName\"]')");
    });

    test('element with TestCafe attributes', function () {
        var hammerheadUrlAttr       = getStoredAttrName('href');
        var hammerheadDataHoverAttr = getStoredAttrName('data-hover');
        var hammerheadDataFocusAttr = getStoredAttrName('data-focus');

        var divWithHammerheadAttr = document.querySelector('.with-hammerhead-attr');

        divWithHammerheadAttr.setAttribute(hammerheadUrlAttr, 'value');
        divWithHammerheadAttr.setAttribute(hammerheadDataHoverAttr, '');
        divWithHammerheadAttr.setAttribute(hammerheadDataFocusAttr, true);

        var selector = selectorGenerator.generate(divWithHammerheadAttr);

        equal(selector, "Selector('.with-hammerhead-attr')");
    });


    module('form+input generation rule');

    test('input element within form with title', function () {
        var input    = document.querySelector('[title="formTitle"] > input');
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('[title=\"formTitle\"]').find('[name=\"someName\"]')");
    });

    test('input element within form with id', function () {
        var input    = document.querySelector('#formId1 > input');
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('#formId1').find('[name=\"someName\"]')");
    });

    test('input element within container with id within form with id', function () {
        var input    = document.querySelector('#formId2 > div > input');
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('#formId2').find('[name=\"someName\"]')");
    });


    module('tag tree rule');

    test('element without identifiers', function () {
        var thirdI   = document.querySelectorAll('q > span > i')[2];
        var selector = selectorGenerator.generate(thirdI);

        equal(selector, "Selector('body').find('q').find('span').nth(1).find('i').nth(2)");
    });


    module('parent with id and child rule');

    test('id+text rule: element with text has a parent with id', function () {
        var elemWithText = document.querySelector('#ancestorId > div > div');
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('#ancestorId').find('div').withText('text').nth(1)");
    });

    test('id+attr rule: element with attr has a parent with id', function () {
        var elementWithAttr = document.querySelector('#parent-id > div > img');
        var selector        = selectorGenerator.generate(elementWithAttr);

        equal(selector, "Selector('#parent-id').find('[alt=\"text for image\"]')");
    });

    test('id+tag tree rule: element without identifiers has a parent with id', function () {
        var elem     = document.querySelectorAll('#divId > div > span')[1];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('#divId').find('div').find('span').nth(1)");
    });


    module('parent with attr and child rule');

    test('attr+text rule: element with text has a parent with attr', function () {
        var elemWithText = document.querySelector('[data-parent-attr] > div');
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('[data-parent-attr=\"ancestorAttr1\"]').find('div').withText('text')");
    });

    test('attr+attr rule: element with attr has a parent with attr', function () {
        var elementWithAttr = document.querySelector('[data-parent-attr="ancestorAttr2"] > img');
        var selector        = selectorGenerator.generate(elementWithAttr);

        equal(selector, "Selector('[data-parent-attr=\"ancestorAttr2\"]').find('[data-child-attr=\"text for image\"]')");
    });

    test('attr+tag tree rule: element without identifiers has a parent with id', function () {
        var elem     = document.querySelectorAll('[data-parent-attr="ancestorAttr3"] > div > span')[1];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('[data-parent-attr=\"ancestorAttr3\"]').find('div').find('span').nth(1)");
    });


    module('parent with text and child rule');

    test('text+text rule: element with text has a parent with text', function () {
        var elemWithText = document.querySelector('strong > s > span');
        var selector     = selectorGenerator.generate(elemWithText);

        equal(selector, "Selector('strong').withText('abc').find('span').withText('0')");
    });

    test('text+attr rule: element with attr has a parent with text', function () {
        var elem     = document.querySelector('strong > s > [data-text]');
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('strong').withText('abc').find('[data-text=\"text\"]')");
    });

    test('text+tag tree rule: element without identifiers has a parent with text', function () {
        var elem     = document.querySelectorAll('s > span')[1];
        var selector = selectorGenerator.generate(elem);

        equal(selector, "Selector('strong').withText('abc').find('s').find('span').nth(1)");
    });


    module('selectors priority');

    test('input element with non-unique name within form with title', function () {
        var input    = document.querySelector('form[title="someTitle"] > input.someClass');
        var selector = selectorGenerator.generate(input);

        equal(selector, "Selector('[name=\"someName\"].someClass')", 'selector generated by attributes rule');
    });

    test('element with class and text equal to other element class and text', function () {
        var div      = document.querySelectorAll('.class-and-text')[1];
        var selector = selectorGenerator.generate(div);

        equal(selector, "Selector('.class-and-text').nth(1)", 'selector by text returns 3 elements, selector by attr returns 2 elements');
    });

    test('boundary case: element with class equal to many others elements within element with id', function () {
        var containerWithId = document.querySelector('#boundaryClassId');
        var divs            = containerWithId.querySelectorAll('.boundaryClass');
        var currentDiv      = divs[divs.length - 1];
        var selector        = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('.boundaryClass').nth(9)");

        $('<div></div>').attr('class', 'boundaryClass').appendTo(containerWithId);
        selector = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('#boundaryClassId').find('div').nth(9)");
    });

    test('boundary case: element with text equal to many others elements', function () {
        var containerWithId = document.querySelector('#boundaryTextId');
        var divs            = containerWithId.querySelectorAll('div');
        var currentDiv      = divs[divs.length - 1];

        containerWithId.removeAttribute('id');

        var selector = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('div').withText('boundaryText').nth(19)");

        $('<div></div>').text('boundaryText').appendTo(containerWithId);
        selector = selectorGenerator.generate(currentDiv);

        equal(selector, "Selector('body').find('section').find('div').nth(19)");
    });


    module('check one element');

    test('example div', function () {
        var table    = document.querySelector('table');
        var cell     = table.querySelector('tr > th');
        var span     = cell.querySelector('span');
        var selector = selectorGenerator.generate(span);

        equal(selector, "Selector('body').find('table').find('tbody').find('tr').find('th').find('span')", 'selector was generated by tag tree');

        span.setAttribute('class', 'exampleClass');
        selector = selectorGenerator.generate(span);
        equal(selector, "Selector('.exampleClass')", 'selector was generated by attr');

        span.removeAttribute('class');
        span.textContent = 'exampleText';
        selector         = selectorGenerator.generate(span);
        equal(selector, "Selector('span').withText('exampleText')", 'selector was generated by text');

        span.setAttribute('id', 'exampleId');
        selector = selectorGenerator.generate(span);
        equal(selector, "Selector('#exampleId')", 'selector was generated by id');

        var text = document.createTextNode('otherText');

        cell.insertBefore(text, span);
        span.removeAttribute('id');
        span.textContent = '';
        selector         = selectorGenerator.generate(span);
        equal(selector, "Selector('th').withText('otherText').find('span')", 'selector was generated by ancestor text and tag tree');

        cell.setAttribute('class', 'parentExampleClass');
        selector = selectorGenerator.generate(span);
        equal(selector, "Selector('.parentExampleClass').find('span')", 'selector was generated by ancestor attr and tag tree');

        table.setAttribute('id', 'parentId');
        selector = selectorGenerator.generate(span);
        equal(selector, "Selector('#parentId').find('tbody').find('tr').find('th').find('span')", 'selector was generated by ancestor id and tag tree');

        span.setAttribute('class', 'child');
        selector = selectorGenerator.generate(span);
        equal(selector, "Selector('#parentId').find('.child')", 'selector was generated by ancestor id and attr');

        span.removeAttribute('class', 'child');
        span.textContent = 'spanText';
        selector         = selectorGenerator.generate(span);
        equal(selector, "Selector('#parentId').find('span').withText('spanText')", 'selector was generated by ancestor id and text');
    });

    /*asyncTest('iframe html element', function () {
    //TODO iframes
        var $iframe = $('<iframe></iframe>').appendTo(container);

        setIframeReadyTimeout(function () {
            var $html    = $('html', $iframe.contents());
            var selector = selectorGenerator.generate($html[0]);

            equal(selector, "Selector('html')");
            start();
        });
    });

    asyncTest('iframe body element', function () {
        var $iframe = $('<iframe></iframe>').appendTo(container);

        setIframeReadyTimeout(function () {
            var $body    = $('body', $iframe.contents());
            var selector = selectorGenerator.generate($body[0]);

            equal(selector, "Selector('body')");
            start();
        });
    });*/

});
